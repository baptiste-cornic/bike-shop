{% extends 'base.html.twig' %}

{% block title %}Confirmation{% endblock %}

{% block body %}
    <h1>Confirmation</h1>
    <div class="confirm-div">
        <div class="row">
            <div class="recap-address-div">
                <div>
                    <h3 class="text-center">Vos informations</h3>
                    <p>{{ app.user.firstname }} {{ app.user.lastname }}</p>
                    <p>{{ app.user.address }}</p>
                    <p>{{ app.user.zipCode }}</p>
                    <p>{{ app.user.city }}</p>
                </div>
            </div>
            <div class="order-recap-div">
                <div>
                    <h3 class="text-center">Votre commande</h3>
                    <table>
                        <thead>
                            <tr>
                                <th></th>
                                <th class="text-left">Nom</th>
                                <th>Quantité</th>
                                <th>Prix total</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for product in cart %}
                                <tr>
                                    <td><img class="picture-75" src="{{ asset('assets/img/'~product.product.picture) }}" alt="{{ product.product.name }}"></td>
                                    <td>
                                        <a class="blue-link" target="_blank" href="{{ path('product', {'id' : product.product.id}) }}">
                                            {{ product.product.name }}
                                        </a>
                                    </td>
                                    <td class="text-center">{{ product.quantity }}</td>
                                    <td class="text-center">{{ product.product.price * product.quantity  }} €</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                        <tfoot class="bold">
                            <tr>
                                <td class="text-center" colspan="2"> Prix total :</td>
                                <td class="text-center" colspan="2">{{ totalPrice }} €</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
        <div class="paiement-div">
            <form id="payment-form">
                <div id="link-authentication-element">
                    <!--Stripe.js injects the Link Authentication Element-->
                </div>
                <div id="payment-element">
                    <!--Stripe.js injects the Payment Element-->
                </div>
                <div class="paiement-div-btn">
                    <button id="submit" class="btn-success btn">
                        <div class="spinner hidden" id="spinner"></div>
                        <span id="button-text">Payer</span>
                    </button>
                </div>
                <div id="payment-message" class="hidden red text-center bold"></div>
            </form>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
        window.addEventListener("DOMContentLoaded", (event) => {

            // pour le mode test
            console.log('Pour tester un paiement valide : utiliser le numéro de carte suivant : 4242 4242 4242 4242')
            console.log('Pour tester un paiement refuser : utiliser le numéro de carte suivant : 4000 0000 0000 9995')
            console.log('Pour tester un paiement avec vérification : utiliser le numéro de carte suivant : 4000 0025 0000 3155')

            const stripe = Stripe("pk_test_51M7bsdCZpiMH9jLx3efZpM0DSLKWsm0F05chFOhf4OXvQRFYBovfnYrfghmsJkTyhLbFxLnMrI1f54o345BN0YLK00UEyNTAQa");
            const clientSecret = '{{ clientSecret }}';
            const urlPayementSucess = '{{ url('order_validation') }}';
            let elements;

            initialize();
            checkStatus();

            document
                .querySelector("#payment-form")
                .addEventListener("submit", handleSubmit);

            async function initialize() {
                // const { clientSecret } = await fetch("/create.php", {
                //    method: "POST",
                //    headers: { "Content-Type": "application/json" },
                //    body: JSON.stringify({ items }),
                // }).then((r) => r.json());

                elements = stripe.elements({ clientSecret });

                const paymentElementOptions = {
                    layout: "tabs",
                };

                const paymentElement = elements.create("payment", paymentElementOptions);
                paymentElement.mount("#payment-element");
            }

            async function handleSubmit(e) {
                e.preventDefault();
                setLoading(true);

                const { error } = await stripe.confirmPayment({
                    elements,
                    confirmParams: {
                        // Make sure to change this to your payment completion page
                        return_url: urlPayementSucess,
                    },
                });

                // This point will only be reached if there is an immediate error when
                // confirming the payment. Otherwise, your customer will be redirected to
                // your `return_url`. For some payment methods like iDEAL, your customer will
                // be redirected to an intermediate site first to authorize the payment, then
                // redirected to the `return_url`.
                if (error.type === "card_error" || error.type === "validation_error") {
                    showMessage(error.message);
                } else {
                    showMessage("Une erreur est survenue.");
                }

                setLoading(false);
            }

            // Fetches the payment intent status after payment submission
            async function checkStatus() {
                const clientSecret = new URLSearchParams(window.location.search).get(
                    "payment_intent_client_secret"
                );

                if (!clientSecret) {
                    return;
                }

                const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

                switch (paymentIntent.status) {
                    case "succeeded":
                        showMessage("Payment succeeded!");
                        break;
                    case "processing":
                        showMessage("Your payment is processing.");
                        break;
                    case "requires_payment_method":
                        showMessage("Your payment was not successful, please try again.");
                        break;
                    default:
                        showMessage("Something went wrong.");
                        break;
                }
            }

            // ------- UI helpers -------
            function showMessage(messageText) {
                const messageContainer = document.querySelector("#payment-message");

                messageContainer.classList.remove("hidden");
                messageContainer.textContent = messageText;

                setTimeout(function () {
                    messageContainer.classList.add("hidden");
                    messageText.textContent = "";
                }, 4000);
            }

            // Show a spinner on payment submission
            function setLoading(isLoading) {
                if (isLoading) {
                    // Disable the button and show a spinner
                    document.querySelector("#submit").disabled = true;
                    document.querySelector("#spinner").classList.remove("hidden");
                    document.querySelector("#button-text").classList.add("hidden");
                } else {
                    document.querySelector("#submit").disabled = false;
                    document.querySelector("#spinner").classList.add("hidden");
                    document.querySelector("#button-text").classList.remove("hidden");
                }
            }

        });
    </script>

{% endblock %}